curl -k \
  -H "Authorization: Bearer <access_token>" \
  -H "Accept: application/vnd.docker.distribution.manifest.v2+json" \
  "https://<registry_url>/v2/<repo>/<image_name>/manifests/<tag>"

curl -X GET \
  "https://.com/v2/73717/image/tags/list?n=100&details=true" \
  -H "Accept: application/json" \
  -H "Authorization: Bearer <YOUR_TOKEN>"


import requests
import logging
from fastapi import HTTPException

logger = logging.getLogger(__name__)

def get_image_created_date_from_registry(image, registry_url, registry_token, verify_ssl=False):
    """
    Returns the created date of the given image from the registry.
    Supports only Bearer token authentication.
    """
    try:
        # --- Ensure registry_url has scheme ---
        if not registry_url.startswith("http"):
            registry_url = f"https://{registry_url}"

        # --- Parse image name and tag using existing helper ---
        image_name, tag = parse_image_name(image)
        logger.info(f"Fetched image_name: {image_name}, tag: {tag} for image: {image}")

        # --- Prepare headers ---
        headers = {
            "Accept": "application/vnd.docker.distribution.manifest.v2+json",
            "Authorization": f"Bearer {registry_token}"
        }

        # --- Step 1: Get manifest ---
        manifest_url = f"{registry_url}/v2/{image_name}/manifests/{tag}"
        logger.info(f"Fetching manifest from {manifest_url}")
        resp = requests.get(manifest_url, headers=headers, verify=verify_ssl)

        if resp.status_code != 200:
            logger.error(f"Failed to get manifest for {image}: {resp.text}")
            raise HTTPException(status_code=resp.status_code, detail=f"Manifest fetch failed: {resp.text}")

        manifest_data = resp.json()

        # --- Step 2: Extract config digest ---
        try:
            config_digest = manifest_data["config"]["digest"]
        except KeyError:
            logger.error(f"No config digest found in manifest for {image}")
            raise HTTPException(status_code=500, detail="Invalid manifest format: missing config digest")

        # --- Step 3: Get config blob (contains created date) ---
        config_url = f"{registry_url}/v2/{image_name}/blobs/{config_digest}"
        logger.info(f"Fetching config blob from {config_url}")
        resp = requests.get(config_url, headers=headers, verify=verify_ssl)

        if resp.status_code != 200:
            logger.error(f"Failed to get config blob for {image}: {resp.text}")
            raise HTTPException(status_code=resp.status_code, detail=f"Config blob fetch failed: {resp.text}")

        config_data = resp.json()
        created_date = config_data.get("created")

        if not created_date:
            logger.warning(f"No 'created' field found in config blob for {image}")
            raise HTTPException(status_code=500, detail="No created date found in image config")

        logger.info(f"Image {image} was created at {created_date}")
        return created_date

    except Exception as e:
        logger.exception(f"Exception in get_image_created_date_from_registry for {registry_url}/{image}: {e}")
        raise HTTPException(status_code=500, detail=str(e))


------

# Step: Process images to find older versions
old_images_map = {}

for image in all_images:
    older_images = []
    try:
        logger.info(f"Processing image: {image}")

        # --- Parse image into repo name and tag ---
        image_name, current_tag = parse_image_name(image)  
        logger.debug(f"Parsed image: repo={image_name}, tag={current_tag}")

        # --- Get all tags for the repo with details (one API call) ---
        tags_url = f"{registry_url}/v2/{image_name}/tags/list?n=100&details=true"
        logger.debug(f"Fetching tags from: {tags_url}")

        response = requests.get(tags_url, headers={"Authorization": f"Bearer {registry_token}"}, timeout=30)

        if response.status_code != 200:
            raise Exception(f"Failed to get tags for {image_name}, status: {response.status_code}, body: {response.text}")

        tags_data = response.json()
        logger.debug(f"Tags data received for {image_name}: {tags_data}")

        # --- Find creation date of the current running image ---
        current_created_date = None
        for tag_info in tags_data.get("tags", []):
            if tag_info["name"] == current_tag:
                current_created_date = tag_info.get("created")
                break

        if not current_created_date:
            raise Exception(f"Creation date not found for current tag {current_tag} in {image_name}")

        logger.info(f"Current created date for {image}: {current_created_date}")

        # --- Collect images older than the current one ---
        for tag_info in tags_data.get("tags", []):
            tag_created = tag_info.get("created")
            if tag_created and tag_created < current_created_date:
                older_images.append({
                    "image": f"{image_name}:{tag_info['name']}",
                    "created_date": tag_created
                })

        old_images_map[image] = older_images
        logger.info(f"Older images for {image}: {older_images}")

    except Exception as e:
        logger.error(f"Error processing image {image}: {str(e)}")
        skipped_images.append({
            "image": image,
            "error": f"Failed to get registry info: {str(e)}"
        })

# old_images_map will now have:
# {
#   "running_image:tag": [
#       {"image": "repo/image:oldtag", "created_date": "2023-05-12T08:15:00Z"},
#       ...
#   ]
# }

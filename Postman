curl -k \
  -H "Authorization: Bearer <access_token>" \
  -H "Accept: application/vnd.docker.distribution.manifest.v2+json" \
  "https://<registry_url>/v2/<repo>/<image_name>/manifests/<tag>"

curl -X GET \
  "https://.com/v2/73717/image/tags/list?n=100&details=true" \
  -H "Accept: application/json" \
  -H "Authorization: Bearer <YOUR_TOKEN>"

https://<your-jfrog-domain>/artifactory/api/search/aql
Authorization: Bearer <your-access-token>
Content-Type: text/plain
items.find({
  "repo": "my-docker-repo",
  "path": {"$match": "myfolder/*"}
})
items.find({
  "repo": "registry-local-nonprod",
  "path": {"$match": "737/kafka-ait*"},
  "created": {"$before": "2025-08-01T00:00:00.000Z"}
}).include("name","repo","path","created","size","modified")

items.find({
  "repo": "registry-local-nonprod",
  "path": {"$match": "737/kafka-ait*"},
  "created": {"$before": "2025-08-01T00:00:00.000Z"}
})
.include("name","repo","path","created","size","modified")




import requests
from datetime import datetime

def parse_image_path(image_url):
    """Extract registry host, repo, path, and tag from image URL."""
    parts = image_url.split("/", 1)
    if len(parts) < 2:
        raise ValueError(f"Invalid image URL format: {image_url}")
    
    registry_host = parts[0]
    remainder = parts[1]

    repo_and_path = remainder.split("/", 1)
    repo = repo_and_path[0]
    path_tag = repo_and_path[1] if len(repo_and_path) > 1 else ""

    if ":" in path_tag:
        path, tag = path_tag.rsplit(":", 1)
    else:
        path, tag = path_tag, None

    return registry_host, repo, path, tag

def get_created_date_for_image(image_url, registry_url, registry_token):
    """Get created date for the given image tag from JFrog."""
    registry_host, repo, path, tag = parse_image_path(image_url)
    if not tag:
        raise ValueError(f"No tag found in {image_url}")

    aql_query = f'''
items.find({{
  "repo": "{repo}",
  "path": "{path}",
  "name": "manifest.json"
}}).include("created")
'''
    headers = {
        "Authorization": f"Bearer {registry_token}",
        "Content-Type": "text/plain"
    }
    resp = requests.post(f"{registry_url}/api/search/aql", data=aql_query, headers=headers)
    resp.raise_for_status()
    results = resp.json().get("results", [])
    if not results:
        return None, registry_host, repo, path
    return results[0]["created"], registry_host, repo, path

def get_images_before_cutoff(registry_host, repo, folder_path, cutoff_date, registry_url, registry_token):
    """List all images in the folder created before the cutoff_date."""
    cutoff_iso = cutoff_date.strftime("%Y-%m-%dT%H:%M:%S.000Z")
    aql_query = f'''
items.find({{
  "repo": "{repo}",
  "path": {{"$match": "{folder_path}*"}},
  "created": {{"$before": "{cutoff_iso}"}},
  "name": "manifest.json"
}}).include("path","created")
'''
    headers = {
        "Authorization": f"Bearer {registry_token}",
        "Content-Type": "text/plain"
    }
    resp = requests.post(f"{registry_url}/api/search/aql", data=aql_query, headers=headers)
    resp.raise_for_status()
    results = resp.json().get("results", [])

    # Convert path to image:tag format
    images_with_tags = []
    for item in results:
        # Path looks like: folder/subfolder/tag
        path_parts = item["path"].split("/")
        if len(path_parts) >= 2:
            tag = path_parts[-1]
            base_path = "/".join(path_parts[:-1])
            image_str = f"{registry_host}/{repo}/{base_path}:{tag}"
            images_with_tags.append(image_str)
    return images_with_tags

def process_images(all_images, registry_url, registry_token):
    """
    For each image:
      - Find its created date
      - Get all older images in same folder
      - Return structured results with full image:tag
    """
    final_results = []

    for image in all_images:
        created_str, registry_host, repo, folder_path = get_created_date_for_image(image, registry_url, registry_token)
        if not created_str:
            final_results.append({
                "image": image,
                "cutoff_date": None,
                "older_images_count": 0,
                "older_images": []
            })
            continue

        cutoff_dt = datetime.strptime(created_str, "%Y-%m-%dT%H:%M:%S.%fZ")
        older_images = get_images_before_cutoff(registry_host, repo, folder_path, cutoff_dt, registry_url, registry_token)

        final_results.append({
            "image": image,
            "cutoff_date": cutoff_dt.isoformat(),
            "older_images_count": len(older_images),
            "older_images": older_images
        })

    return final_results


# Example usage
if __name__ == "__main__":
    all_images = [
        "registry.sdi.com/registry-local-docker-nonprod/73717/kubes-kafka-rest:20250702040505",
        "registry.sdi.com/registry-local-docker-nonprod/73717/another-image:20250615010101"
    ]

    results = process_images(
        all_images,
        registry_url="https://registry-nonprod.sdi.corp.bankofamerica.com/artifactory",
        registry_token="<your-bearer-token>"
    )

    for res in results:
        print(f"\nImage: {res['image']}")
        print(f"Cutoff Date: {res['cutoff_date']}")
        print(f"Older Images Count: {res['older_images_count']}")
        for img in res['older_images']:
            print(f"  {img}")

Sure! Below is an example of an `instructions.md` file designed as a prompt to guide Copilot (or a similar agent) through all the needed steps when a user wants to "create app using patterns." This template is written to ensure clear, stepwise guidance and user interaction, adaptable to your Copilot+Patterns plugin integration.

# instructions.md

## Title
**App Creation Workflow Using Patterns Extension**

## Trigger
> When a user requests to "create app using patterns", follow these steps precisely to gather necessary inputs and execute the Patterns plugin.

### Step 1: Collect Required Inputs

1. **Prompt the user to provide essential details:**
    - Ask: "Which programming language would you like to use for the app (e.g., Python, JavaScript, Java, etc.)?"
    - Ask: "What should be the application interface type (e.g., web, mobile, CLI)?"
    - Ask: "Do you want to include authentication (Yes/No)?"
    - Ask: "Please provide a short description of the app's purpose and any main features you'd like."

### Step 2: Gather Language-Specific Information

2. **Based on the language selection, request further details:**
    - **If Python:**  
      Ask: "Should the app use any specific frameworks (e.g., Flask, Django)?"
    - **If JavaScript:**  
      Ask: "Should the app target Node.js, browser (React/Vue), or both?"
    - **If Java:**  
      Ask: "Do you want to use Spring Boot or another framework?"
    - *(Expand/add more language-specific prompts as needed)*

### Step 3: Invoke Patterns Plugin

3. **Summarize all gathered inputs for confirmation:**  
    - Present the collected details to the user:  
      "You have chosen:  
      - Language: {language}  
      - App Type: {interface type}  
      - Authentication: {auth}  
      - Description: {description}  
      - Additional settings: {any language-specific info}"

    - Ask for final confirmation:  
      "Should I proceed to create the app using the above settings? (Yes/No)"

4. **If confirmed, invoke the Patterns extension in Copilot chat:**
    - Use the following invocation format:  
      `@patterns create --language {language} --type {interface} --auth {auth} --desc "{description}" {additional_flags}`

5. **Display Patterns extension output to the user and provide the next steps or actionable links/files.**

## Notes

- If at any step the user provides unclear or insufficient input, ask clarifying questions before proceeding.
- Always confirm choices before plugin execution.
- Ensure compliance with any Copilot or organizational restrictions while interacting with plugins.

This file can be adapted per your organization's workflow and expanded with additional prompts or constraints as required for your Patterns plugin integration.

Sources


import os

def generate_service(service_name):
    base_dir = os.path.join(os.getcwd(), service_name)
    os.makedirs(base_dir, exist_ok=True)

    # Minimal Spring Boot structure
    src_main = os.path.join(base_dir, "src/main/java/com/example")
    src_resources = os.path.join(base_dir, "src/main/resources")
    os.makedirs(src_main, exist_ok=True)
    os.makedirs(src_resources, exist_ok=True)

    # pom.xml
    pom = f"""
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0
                             http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>com.example</groupId>
  <artifactId>{service_name}</artifactId>
  <version>0.0.1-SNAPSHOT</version>
  <packaging>jar</packaging>

  <parent>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-parent</artifactId>
    <version>3.2.0</version>
  </parent>

  <dependencies>
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-web</artifactId>
    </dependency>
  </dependencies>

  <build>
    <plugins>
      <plugin>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-maven-plugin</artifactId>
      </plugin>
    </plugins>
  </build>
</project>
"""
    with open(os.path.join(base_dir, "pom.xml"), "w") as f:
        f.write(pom)

    # Application.java
    app_file = os.path.join(src_main, f"{service_name.capitalize()}Application.java")
    with open(app_file, "w") as f:
        f.write(f"""
package com.example;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.web.bind.annotation.*;

@SpringBootApplication
@RestController
public class {service_name.capitalize()}Application {{

    @GetMapping("/hello")
    public String hello() {{
        return "Hello from {service_name}!";
    }}

    public static void main(String[] args) {{
        SpringApplication.run({service_name.capitalize()}Application.class, args);
    }}
}}
""")

    return base_dir




from fastapi import FastAPI
from pydantic import BaseModel
import uvicorn
from provision_simple_service import generate_service
import os

app = FastAPI(title="Spring Boot MCP Server")

class GenerateServiceRequest(BaseModel):
    serviceName: str

class GenerateServiceResponse(BaseModel):
    status: str
    outputPath: str

@app.post("/generate-service", response_model=GenerateServiceResponse)
def generate_service_tool(req: GenerateServiceRequest):
    path = generate_service(req.serviceName)
    return GenerateServiceResponse(
        status=f"Spring Boot microservice '{req.serviceName}' generated successfully!",
        outputPath=os.path.abspath(path)
    )

if __name__ == "__main__":
    uvicorn.run(app, host="0.0.0.0", port=8081)

{
  "name": "generate-simple-spring-boot",
  "description": "Generates a minimal Spring Boot microservice with a Hello World endpoint",
  "version": "1.0.0",
  "entry_point": "http://localhost:8081/generate-service",
  "input_schema": {
    "type": "object",
    "properties": {
      "serviceName": {
        "type": "string",
        "description": "Name of the microservice"
      }
    },
    "required": ["serviceName"]
  }
}


{
  "name": "springboot-generator",
  "version": "1.0.0",
  "description": "Generates simple Spring Boot microservices",
  "intents": [
    {
      "intent": "create-springboot-service",
      "examples": [
        "create a spring boot microservice",
        "generate a hello world spring boot service",
        "new spring boot project {{serviceName}}"
      ],
      "tool": "generate-simple-spring-boot",
      "parameters": {
        "serviceName": {
          "type": "string",
          "prompt": "What is the name of your service?",
          "required": true
        }
      }
    }
  ]
}



"copilot-agent.tools": [
  {
    "name": "springboot-generator",
    "manifest": "/absolute/path/springboot-mcp/mcp_tool_manifest.json",
    "instructions": "/absolute/path/springboot-mcp/instructions.json"
  }
]



****************** Extension ******************************
{
  "name": "templateprocessor",
  "displayName": "Template Processor",
  "description": "Collect AIT, SPK, OCPURL and process",
  "version": "0.0.1",
  "engines": {
    "vscode": "^1.90.0"
  },
  "activationEvents": [
    "onCommand:templateprocessor.openForm"
  ],
  "main": "./out/extension.js",
  "contributes": {
    "commands": [
      {
        "command": "templateprocessor.openForm",
        "title": "Template Processor: Open Form"
      }
    ]
  },
  "scripts": {
    "vscode:prepublish": "tsc -p ./",
    "compile": "tsc -p ./",
    "watch": "tsc -watch -p ./",
    "pretest": "npm run compile",
    "test": "node ./out/test/runTest.js"
  },
  "devDependencies": {
    "@types/vscode": "^1.90.0",
    "@types/node": "^20.11.30",
    "typescript": "^5.4.5",
    "tslint": "^6.1.3",
    "vscode-test": "^1.7.2"
  }
}
--------------
import * as vscode from 'vscode';

export function activate(context: vscode.ExtensionContext) {
  const disposable = vscode.commands.registerCommand('templateprocessor.openForm', () => {
    const panel = vscode.window.createWebviewPanel(
      'templateProcessorForm',
      'Template Processor Form',
      vscode.ViewColumn.One,
      {
        enableScripts: true
      }
    );

    panel.webview.html = getWebviewHtml();

    panel.webview.onDidReceiveMessage(
      message => {
        if (message.command === 'submit') {
          const { ait, spk, ocpurl } = message;

          const output = vscode.window.createOutputChannel("Template Processor Logs");
          output.appendLine(`AIT: ${ait}`);
          output.appendLine(`SPK: ${spk}`);
          output.appendLine(`OCP URL: ${ocpurl}`);
          output.show(true);

          vscode.window.showInformationMessage(
            `Inputs received:\nAIT: ${ait}\nSPK: ${spk}\nOCP URL: ${ocpurl}`
          );
        }
      },
      undefined,
      context.subscriptions
    );
  });

  context.subscriptions.push(disposable);
}

function getWebviewHtml(): string {
  return `
  <!DOCTYPE html>
  <html lang="en">
  <head>
    <meta charset="UTF-8">
    <title>Template Input Form</title>
  </head>
  <body>
    <h2>Enter Parameters</h2>
    <label>AIT: <input type="text" id="ait" /></label><br>
    <label>SPK: <input type="text" id="spk" /></label><br>
    <label>OCP URL: <input type="text" id="ocpurl" /></label><br><br>
    <button onclick="submitForm()">Submit</button>

    <script>
      const vscode = acquireVsCodeApi();
      function submitForm() {
        const ait = document.getElementById('ait').value;
        const spk = document.getElementById('spk').value;
        const ocpurl = document.getElementById('ocpurl').value;

        vscode.postMessage({
          command: 'submit',
          ait,
          spk,
          ocpurl
        });
      }
    </script>
  </body>
  </html>`;
}

export function deactivate() {}




-----//////------


import * as vscode from 'vscode';

export function activate(context: vscode.ExtensionContext) {
  context.subscriptions.push(
    vscode.commands.registerCommand('templateprocessor.openForm', () => {
      const panel = vscode.window.createWebviewPanel(
        'templateProcessorForm',
        'Template Processor Form',
        vscode.ViewColumn.Active, // shows as a side panel
        {
          enableScripts: true,
          retainContextWhenHidden: false
        }
      );

      panel.webview.html = getWebviewHtml();

      panel.webview.onDidReceiveMessage(
        message => {
          if (message.command === 'submit') {
            const { ait, spk, ocpurl } = message;

            vscode.window.showInformationMessage(
              `Received inputs:\nAIT: ${ait}\nSPK: ${spk}\nOCP URL: ${ocpurl}`
            );

            console.log(`[TemplateProcessor] AIT: ${ait}`);
            console.log(`[TemplateProcessor] SPK: ${spk}`);
            console.log(`[TemplateProcessor] OCPURL: ${ocpurl}`);
          }
        },
        undefined,
        context.subscriptions
      );
    })
  );
}

function getWebviewHtml(): string {
  return `
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Template Processor Inputs</title>
  <style>
    body {
      font-family: sans-serif;
      padding: 1rem;
    }

    h2 {
      margin-bottom: 1rem;
    }

    label {
      display: block;
      margin-bottom: 1rem;
    }

    input[type="text"] {
      width: 100%;
      padding: 8px;
      box-sizing: border-box;
    }

    button {
      padding: 8px 16px;
      margin-top: 1rem;
    }

    .form {
      width: 300px;
    }
  </style>
</head>
<body>
  <div class="form">
    <h2>Enter Parameters</h2>
    <label>AIT: <input type="text" id="ait" /></label>
    <label>SPK: <input type="text" id="spk" /></label>
    <label>OCP URL: <input type="text" id="ocpurl" /></label>
    <button onclick="submitForm()">Submit</button>
  </div>

  <script>
    const vscode = acquireVsCodeApi();

    function submitForm() {
      const ait = document.getElementById('ait').value;
      const spk = document.getElementById('spk').value;
      const ocpurl = document.getElementById('ocpurl').value;

      vscode.postMessage({
        command: 'submit',
        ait,
        spk,
        ocpurl
      });
    }
  </script>
</body>
</html>
`;
}

from flask import Flask, request
import os

app = Flask(__name__)

@app.route('/restart', methods=['GET'])
def restart():
    file_path = '/path/to/sidecar/volume/liveness-probe-file'
    with open(file_path, 'w') as f:
        f.write('restart')
    return "File created to trigger restart", 200

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=8080)
--------------------------


apiVersion: apps/v1
kind: Deployment
metadata:
  name: sidecar
spec:
  replicas: 5
  selector:
    matchLabels:
      app: sidecar
  template:
    metadata:
      labels:
        app: sidecar
    spec:
      containers:
      - name: sidecar-container
        image: your-sidecar-image
        volumeMounts:
        - mountPath: /path/to/sidecar/volume
          name: sidecar-volume
        livenessProbe:
          exec:
            command:
            - cat
            - /path/to/sidecar/volume/liveness-probe-file
          initialDelaySeconds: 10
          periodSeconds: 5
      volumes:
      - name: sidecar-volume
        emptyDir: {}

----------------------------
apiVersion: apps/v1
kind: Deployment
metadata:
  name: sidecar
spec:
  replicas: 5
  selector:
    matchLabels:
      app: sidecar
  template:
    metadata:
      labels:
        app: sidecar
    spec:
      containers:
      - name: sidecar-container
        image: your-sidecar-image
        volumeMounts:
        - mountPath: /path/to/sidecar/volume
          name: sidecar-volume
        livenessProbe:
          exec:
            command:
            - /bin/sh
            - -c
            - >
              if [ -f /path/to/sidecar/volume/liveness-probe-file ]; then
                exit 1;
              else
                exit 0;
              fi
          initialDelaySeconds: 10
          periodSeconds: 5
      volumes:
      - name: sidecar-volume
        emptyDir: {}

---------------------------------

from flask import Flask, request
import os

app = Flask(__name__)

@app.route('/restart', methods=['GET'])
def restart():
    file_path = '/path/to/sidecar/volume/liveness-probe-file'
    try:
        # Create the directory if it does not exist
        os.makedirs(os.path.dirname(file_path), exist_ok=True)
        
        # Create the file
        with open(file_path, 'w') as f:
            f.write('restart')
        return "File created to trigger restart", 200
    except Exception as e:
        return f"Failed to create file: {e}", 500

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=8080)

--------------------

from flask import Flask, request
import os
import logging

# Configure logging
logging.basicConfig(level=logging.DEBUG)

app = Flask(__name__)

@app.route('/restart', methods=['GET'])
def restart():
    file_path = '/path/to/sidecar/volume/liveness-probe-file'
    try:
        # Log the file path
        app.logger.debug(f"Attempting to create directory and file at: {file_path}")
        
        # Create the directory if it does not exist
        os.makedirs(os.path.dirname(file_path), exist_ok=True)
        
        # Create the file
        with open(file_path, 'w') as f:
            f.write('restart')
        
        # Log success
        app.logger.debug(f"File created at: {file_path}")
        return "File created to trigger restart", 200
    except Exception as e:
        # Log the exception
        app.logger.error(f"Failed to create file: {e}")
        return f"Failed to create file: {e}", 500

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=8080)

###############
from flask import Flask, request
import os
import logging

# Configure logging
logging.basicConfig(level=logging.DEBUG)

app = Flask(__name__)

@app.route('/restart', methods=['GET'])
def restart():
    file_path = '/path/to/sidecar/volume/liveness-probe-file'
    try:
        # Log the file path
        app.logger.debug(f"Attempting to write to file at: {file_path}")
        
        # Create the directory if it does not exist
        os.makedirs(os.path.dirname(file_path), exist_ok=True)
        
        # Write 'restart' to the file
        with open(file_path, 'w') as f:
            f.write('restart')
        
        # Log success
        app.logger.debug(f"Written 'restart' to file at: {file_path}")
        return "File updated to trigger restart", 200
    except Exception as e:
        # Log the exception
        app.logger.error(f"Failed to update file: {e}")
        return f"Failed to update file: {e}", 500

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=8080)

#######################
apiVersion: apps/v1
kind: Deployment
metadata:
  name: sidecar
spec:
  replicas: 5
  selector:
    matchLabels:
      app: sidecar
  template:
    metadata:
      labels:
        app: sidecar
    spec:
      containers:
      - name: sidecar-container
        image: your-sidecar-image
        volumeMounts:
        - mountPath: /path/to/sidecar/volume
          name: sidecar-volume
        livenessProbe:
          exec:
            command:
            - /bin/sh
            - -c
            - >
              if grep -q "restart" /path/to/sidecar/volume/liveness-probe-file; then
                exit 1;
              else
                exit 0;
              fi
          initialDelaySeconds: 10
          periodSeconds: 5
      volumes:
      - name: sidecar-volume
        emptyDir: {}

///////////////////.......::::

from flask import Flask
import os

app = Flask(__name__)

@app.route('/restart', methods=['GET'])
def restart():
    file_path = '/mnt/data/test-file.txt'
    if not os.path.exists(file_path):
        return f'File {file_path} does not exist.', 404
    
    with open(file_path, 'a') as f:
        f.write('This is a test file created by hitting the /restart endpoint.\n')
    
    return f'Message written to {file_path} successfully.', 200

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=8080)


--------------
**Summary:**  
As per the design, we conducted a POC to identify the impediments in implementing a resource monitor to restart failed sidecars using a liveness probe.

**Requirements:**
1. Expose an endpoint in the sidecar that can be called by the resource monitor to restart the sidecar via the liveness probe:
   - The endpoint should be capable of returning a 500 response to the liveness probe health check.
   - The endpoint should be able to create a file in the sidecar volume that will be monitored by the liveness probe to trigger a pod restart.

**Observations:**
- This approach works fine for a single replica of the sidecar pod.
- For multiple replicas, the request from the resource monitor is accepted or routed to one of the sidecar replicas, causing only that sidecar to restart.

**Next Steps:**
We have additional options to explore:
- Using a headless service to broadcast a message to all sidecar replicas to restart.
- Utilizing OpenShift admin controls to manage this scenario.

______________________________________________________________________________________________

import socket
import requests
from flask import Flask, request

app = Flask(__name__)

@app.route('/broadcast', methods=['POST'])
def broadcast():
    service_name = "my-headless-service.mynamespace.svc.cluster.local"
    port = 5000
    endpoint = "/test"
    
    pod_ips = socket.gethostbyname_ex(service_name)[2]
    
    data = request.get_json()
    results = []
    
    for ip in pod_ips:
        url = f"http://{ip}:{port}{endpoint}"
        response = requests.post(url, json=data)
        results.append(f"Response from {ip}: {response.status_code}")

    # Self-call to /test endpoint
    url = f"http://localhost:{port}{endpoint}"
    response = requests.post(url, json=data)
    results.append(f"Response from self: {response.status_code}")
    
    return "Broadcast complete. Results: " + ", ".join(results), 200

if __name__ == "__main__":
    app.run(host='0.0.0.0', port=6000)


def has_running_pods(k8s_client, namespace, parent_name, version, kind):
    dyn_client = k8s_client
    pods = dyn_client.resources.get(api_version="v1", kind="Pod")
    try:
        pod_list = pods.get(namespace=namespace)
        for pod in pod_list.items:
            owners = pod.metadata.owner_references or []
            for owner in owners:
                if owner.kind == kind and owner.name == parent_name:
                    if pod.status.phase == "Running":
                        return True
    except Exception as e:
        logger.warning(f"Error checking running pods for {kind} {parent_name}: {e}")
    return False


def handle_replica_set(k8s_client, rs_obj, dep_api, rs_api, pods_api, namespace, pod_name, deleted):
    rs_name = rs_obj.metadata.name
    deployment_name = rs_obj.metadata.owner_references[0].name if rs_obj.metadata.owner_references else None

    if not deployment_name:
        logger.warning(f"ReplicaSet {rs_name} has no owning Deployment.")
        return

    # Check for running pods under the entire deployment
    has_running = has_running_pods(
        k8s_client=k8s_client,
        namespace=namespace,
        parent_name=deployment_name,
        version="v1",
        kind="Deployment"
    )

    if not has_running:
        try:
            logger.info(f"No running pods found under Deployment {deployment_name}. Deleting Deployment, RS, and Pod.")
            dep_api.delete(name=deployment_name, namespace=namespace)
            logger.info(f"Deleted Deployment {deployment_name}")
        except Exception as e:
            logger.warning(f"Failed to delete Deployment {deployment_name}: {e}")

        try:
            rs_api.delete(name=rs_name, namespace=namespace)
            logger.info(f"Deleted ReplicaSet {rs_name}")
        except Exception as e:
            logger.warning(f"Failed to delete ReplicaSet {rs_name}: {e}")

        try:
            pods_api.delete(name=pod_name, namespace=namespace)
            logger.info(f"Deleted Pod {pod_name}")
            deleted.append(pod_name)
        except Exception as e:
            logger.warning(f"Failed to delete Pod {pod_name}: {e}")
    else:
        logger.info(f"Deployment {deployment_name} still has running pods. Skipping deletion.")

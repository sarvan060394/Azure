import logging
import sys
import json

class JSONFormatter(logging.Formatter):
    def format(self, record):
        log_entry = {
            "timestamp": self.formatTime(record, self.datefmt),
            "level": record.levelname,
            "event": getattr(record, "event_name", record.name),
            "message": record.getMessage(),
        }
        if hasattr(record, "extra_data"):
            log_entry.update(record.extra_data)
        return json.dumps(log_entry)

# Configure logger
logger = logging.getLogger("cleanup-logger")
logger.setLevel(logging.INFO)

handler = logging.StreamHandler(sys.stdout)
handler.setFormatter(JSONFormatter())

logger.handlers = [handler]
logger.propagate = False

# Optional: reusable log_event function
def log_event(event_name: str, details: dict, level: str = "info"):
    extra = {
        "event_name": event_name,
        "extra_data": details
    }
    msg = details.get("message", event_name)

    if level == "debug":
        logger.debug(msg, extra=extra)
    elif level == "info":
        logger.info(msg, extra=extra)
    elif level == "warning":
        logger.warning(msg, extra=extra)
    elif level == "error":
        logger.error(msg, extra=extra)
    elif level == "critical":
        logger.critical(msg, extra=extra)
    else:
        logger.info(msg, extra=extra)

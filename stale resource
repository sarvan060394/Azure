def is_non_prod_namespace(namespace: str) -> bool:
    return "prod" not in namespace.lower()
def list_stale_pods(k8s_client, namespaces: List[str], statuses: List[str]):
    dyn_client = DynamicClient(k8s_client)
    pods = dyn_client.resources.get(api_version='v1', kind='Pod')

    stale_pods = []

    for ns in namespaces:
        if not is_non_prod_namespace(ns):
            logger.warning(f"Skipping namespace '{ns}' as it is considered prod.")
            continue
        try:
            pod_list = pods.get(namespace=ns)
            for pod in pod_list.items:
                container_statuses = pod.status.containerStatuses or []
                for cs in container_statuses:
                    if cs.state.waiting and cs.state.waiting.reason in statuses:
                        stale_pods.append({
                            "namespace": ns,
                            "name": pod.metadata.name,
                            "status": cs.state.waiting.reason
                        })
        except Exception as e:
            logger.error(f"Error retrieving pods from namespace {ns}: {e}")
    return stale_pods
def remove_stale_pods(k8s_client, namespaces: List[str], statuses: List[str]):
    stale_pods = list_stale_pods(k8s_client, namespaces, statuses)
    dyn_client = DynamicClient(k8s_client)
    deleted_pods = []

    for pod in stale_pods:
        try:
            dyn_client.resources.get(api_version="v1", kind="Pod").delete(
                namespace=pod["namespace"], name=pod["name"]
            )
            logger.info(f"Deleted pod {pod['name']} from namespace {pod['namespace']}")
            deleted_pods.append(pod)
        except Exception as e:
            logger.error(f"Error removing pod {pod['name']}: {e}")

    return {"deleted_pods": deleted_pods}
from fastapi import Query
from typing import Optional

DEFAULT_NON_PROD_NAMESPACES = ["dev", "qa", "test", "sandbox"]

@app.post("/delete-stale-pods")
def delete_stale_pods_endpoint(
    statuses: List[str] = Query(["CrashLoopBackOff", "Completed"]),
    namespaces: Optional[List[str]] = Query(None)
):
    used_namespaces = namespaces if namespaces else DEFAULT_NON_PROD_NAMESPACES
    return remove_stale_pods(k8s_client, used_namespaces, statuses)


;;;;;;;;;;;;;;;;;;;:::::

@app.post("/delete-stale-pods")
def delete_stale_pods_endpoint(
    openshift_cluster_url: str,
    username: str,
    password: str,
    statuses: List[str] = Query(["CrashLoopBackOff", "Completed"]),
    namespaces: Optional[List[str]] = Query(None)
):
    """
    API to delete stale pods based on user-selected statuses.
    """
    k8s_client = get_openshift_client(openshift_cluster_url, username, password)

    if namespaces is None:
        dyn_client = DynamicClient(k8s_client)
        all_projects = dyn_client.resources.get(api_version="project.openshift.io/v1", kind="Project").get()
        namespaces = [
            project.metadata.name
            for project in all_projects.items
            if is_non_prod_namespace(k8s_client, project.metadata.name)
        ]
    
    return remove_stale_pods(k8s_client, namespaces, statuses)

def remove_stale_pods(k8s_client, namespaces: List[str], statuses: List[str]):
    stale_pods = list_stale_pods(k8s_client, namespaces, statuses)
    dyn_client = DynamicClient(k8s_client)
    deleted_pods = []

    for pod in stale_pods:
        try:
            dyn_client.resources.get(api_version="v1", kind="Pod").delete(
                namespace=pod["namespace"], name=pod["name"]
            )
            logger.info(f"Deleted pod {pod['name']} from namespace {pod['namespace']}")
            deleted_pods.append(pod)
        except Exception as e:
            logger.error(f"Error removing pod {pod['name']}: {e}")

    return {"deleted_pods": deleted_pods}


def list_stale_pods(k8s_client, namespaces: List[str], statuses: List[str]):
    dyn_client = DynamicClient(k8s_client)
    pods = dyn_client.resources.get(api_version="v1", kind="Pod")

    stale_pods = []

    for ns in namespaces:
        if not is_non_prod_namespace(k8s_client, ns):
            continue  # Skip prod namespaces
        
        try:
            pod_list = pods.get(namespace=ns)
            for pod in pod_list.items:
                container_statuses = pod.status.containerStatuses or []
                for cs in container_statuses:
                    if cs.state.waiting and cs.state.waiting.reason in statuses:
                        stale_pods.append({
                            "namespace": ns,
                            "name": pod.metadata.name,
                            "status": cs.state.waiting.reason
                        })
        except Exception as e:
            logger.error(f"Error retrieving pods from namespace {ns}: {e}")
    
    return stale_pods

def is_non_prod_namespace(k8s_client, namespace: str) -> bool:
    """
    Checks if a namespace is labeled as non-prod in OpenShift.
    """
    dyn_client = DynamicClient(k8s_client)
    projects = dyn_client.resources.get(api_version="project.openshift.io/v1", kind="Project")

    try:
        project = projects.get(name=namespace)
        env_type = project.metadata.labels.get("env_type", "").lower()
        if env_type == "nonprod":
            return True
        logger.warning(f"Namespace {namespace} is labeled as '{env_type}', skipping deletion.")
    except Exception as e:
        logger.error(f"Error retrieving namespace metadata for {namespace}: {e}")

    return False


--------------------*********************-----------------------------------


def list_stale_pods(k8s_client, namespaces: List[str], statuses: List[str]):
    dyn_client = DynamicClient(k8s_client)
    v1_pods = dyn_client.resources.get(api_version="v1", kind="Pod")
    stale_pods = {}

    for ns in namespaces:
        try:
            pods = v1_pods.get(namespace=ns)
        except Exception as e:
            logger.error(f"Failed to fetch pods in namespace '{ns}': {str(e)}")
            continue

        for pod in pods.items:
            pod_name = pod.metadata.name
            pod_status = pod.status.phase
            container_statuses = pod.status.containerStatuses or []
            deletion_timestamp = pod.metadata.deletionTimestamp

            is_crashloop = any(
                cs.state.waiting and cs.state.waiting.reason == "CrashLoopBackOff"
                for cs in container_statuses
            )
            is_error = any(
                cs.state.waiting and cs.state.waiting.reason == "Error"
                for cs in container_statuses
            )
            is_pending = pod_status == "Pending"
            is_completed = pod_status == "Succeeded" and "Completed" in statuses
            is_terminating = deletion_timestamp is not None

            match = (
                ("CrashLoopBackOff" in statuses and is_crashloop) or
                ("Error" in statuses and is_error) or
                ("Pending" in statuses and is_pending) or
                ("Completed" in statuses and is_completed) or
                ("Terminating" in statuses and is_terminating)
            )

            if match:
                stale_pods.setdefault(ns, []).append(pod_name)
                logger.info(f"Identified stale pod '{pod_name}' with status '{pod_status}' in namespace '{ns}'")

    return stale_pods

from pydantic import BaseModel
from typing import List, Optional

class DeletePodRequest(BaseModel):
    openshift_cluster_url: str
    username: str
    password: str
    namespaces: Optional[List[str]] = []  # default namespaces to search
    statuses: List[str] = ["CrashLoopBackOff", "Completed"]  # default selected


def validate_namespaces_are_nonprod(k8s_client, namespaces: List[str]) -> List[str]:
    dyn_client = DynamicClient(k8s_client)
    v1_projects = dyn_client.resources.get(api_version="project.openshift.io/v1", kind="Project")
    valid_namespaces = []

    for ns in namespaces:
        try:
            project = v1_projects.get(name=ns)
            labels = project.metadata.labels or {}
            if labels.get("env_type") == "nonprod":
                valid_namespaces.append(ns)
            else:
                logger.warning(f"Namespace '{ns}' is labeled as PROD or not labeled at all. Skipping.")
        except Exception as e:
            logger.error(f"Error validating namespace '{ns}': {str(e)}")

    return valid_namespaces


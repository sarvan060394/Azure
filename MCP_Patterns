Python api:
from fastapi import FastAPI, HTTPException
from pydantic import BaseModel
import subprocess
import os
import shutil
from urllib.parse import urlparse, urlunparse

app = FastAPI()

# üîê Hardcoded credentials (secure this later via env vars or vault)
BITBUCKET_USERNAME = "your_username"
BITBUCKET_TOKEN = "your_access_token"

class CloneRequest(BaseModel):
    repo_url: str  # Example: https://bitbucket.mycompany.com/scm/project/repo.git
    branch: str
    target_path: str

@app.post("/clone")
def clone_repo(req: CloneRequest):
    try:
        # Inject credentials into repo URL
        parsed_url = urlparse(req.repo_url)
        authed_netloc = f"{BITBUCKET_USERNAME}:{BITBUCKET_TOKEN}@{parsed_url.netloc}"
        authed_url = urlunparse(parsed_url._replace(netloc=authed_netloc))

        # Remove existing directory if exists
        if os.path.exists(req.target_path):
            shutil.rmtree(req.target_path)

        subprocess.run(
            ["git", "clone", "-b", req.branch, authed_url, req.target_path],
            check=True
        )

        return {"status": "success", "message": f"Cloned repo to {req.target_path}"}
    except subprocess.CalledProcessError as e:
        raise HTTPException(status_code=500, detail=f"Git clone failed: {str(e)}")


********************************************************************************
MCP tool:

import requests
import os

def call_clone_api():
    current_dir = os.getcwd()
    target_path = os.path.join(current_dir, "cloned_template")

    payload = {
        "repo_url": "https://bitbucket.mycompany.com/scm/project/repo.git",
        "branch": "develop",
        "target_path": target_path
    }

    response = requests.post("http://localhost:8000/clone", json=payload)

    if response.status_code == 200:
        print("[MCP] Clone success:", response.json()["message"])
    else:
        print("[MCP] Clone failed:", response.text)

if __name__ == "__main__":
    call_clone_api()


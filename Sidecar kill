# sidecar.py
from flask import Flask, request
import os
import signal

app = Flask(__name__)

@app.route('/restart', methods=['POST'])
def restart():
    os.kill(os.getpid(), signal.SIGTERM)
    return "Restarting...", 200

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5000)

------------------------
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
    spec:
      containers:
      - name: redis
        image: redis:6.2
        volumeMounts:
        - name: redis-config
          mountPath: /usr/local/etc/redis/redis.conf
          subPath: redis.conf
        env:
        - name: REDIS_USERNAME
          valueFrom:
            secretKeyRef:
              name: redis-secret
              key: REDIS_USERNAME
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: redis-secret
              key: REDIS_PASSWORD
        args: ["sh", "-c", "envsubst < /usr/local/etc/redis/redis.conf > /usr/local/etc/redis/redis-subst.conf && redis-server /usr/local/etc/redis/redis-subst.conf"]
      volumes:
      - name: redis-config
        configMap:
          name: redis-config

--------------//

apiVersion: v1
kind: ConfigMap
metadata:
  name: redis-config
data:
  redis.conf: |
    # Redis configuration file

    # Set the password for Redis authentication
    requirepass ${REDIS_PASSWORD}

    # For Redis 6.0 and above, you can also use ACL (Access Control List) for more advanced user management
    user ${REDIS_USERNAME} on >${REDIS_PASSWORD} ~* +@all


--------------------------------------1111

import requests

def call_start_monitoring(redis_host, redis_port, sidecar_url):
    payload = {
        'edis_host': redis_host,
        'edis_port': redis_port,
        'idecar_url': sidecar_url
    }
    response = requests.post('http://your-flask-app.com/start-monitoring', json=payload)
    if response.status_code == 200:
        print("Start monitoring successful!")
    else:
        print("Error starting monitoring:", response.text)

# Example usage
call_start_monitoring('redis.cp-1049543.svc.cluster.local', 443, 'http://sidecar-restart-cp-1049543.apps.useast16.bofa.com/teststart')

-----------------------------------------
from flask import Flask, request, jsonify

app = Flask(__name__)

@app.route('/start-monitoring', methods=['POST'])
def start_monitoring():
    payload = request.get_json()
    redis_host = payload['redis_host']
    redis_port = payload['redis_port']
    sidecar_url = payload['sidecar_url']

    # Perform operations using the payload values
    check_redis(redis_host, redis_port)
    notify_sidecar(sidecar_url)

    return jsonify({'message': 'Start monitoring successful!'})

def check_redis(redis_host, redis_port):
    try:
        r = redis.StrictRedis(host=redis_host, port=redis_port)
        r.ping()
        print("Redis is back online")
    except redis.ConnectionError:
        print("Redis still down. Checking again in 5 seconds...")

def notify_sidecar(sidecar_url):
    response = requests.get(sidecar_url)
    if response.status_code == 200:
        print("Notified sidecar to restart")
    else:
        print("Failed to notify sidecar")

if __name__ == '__main__':
    app.run(debug=True)


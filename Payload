Deliverables for Year-End Self Evaluation
	•	Delivered a POC for building single container images using Python multistage Docker to optimize image size and efficiency.
	•	Performed analysis and created multi-feature container images to support KUBES capabilities.
	•	Conducted KUBES performance testing, including stress and load testing for Kafka REST Proxy and KUBES Proxy services.
	•	Enabled Horizontal Pod Autoscaler (HPA) and Vertical Pod Autoscaler (VPA) for KUBES applications to optimize resource utilization.
	•	Enabled SSL for KUBES applications to enhance security and supported production deployment.
	•	Implemented KUBES container startup sequence, ensuring all auxiliary components are up before starting the application container.
	•	Fine-tuned compute resource configurations for Kafka Producer deployments and performed POD T-shirt sizing for optimized resource management.
	•	Developed a solution to persist Prometheus metrics for KUBE REST Proxy to ensure metric continuity.
	•	Implemented Resource Service Monitor to handle failures, monitor sidecar state for restarts, and improve service resilience.
	•	Delivered a Redis cluster setup and resolved cluster creation issues to improve deployment stability.
	•	Performed POC for generating heap dumps for Java applications with the support of the CTI team.
	•	Guided and supported the team for all platform-related troubleshooting and issue resolution.
	•	Contributed to the CML event for the Green Engineering contest, implemented CodeCarbon in the bank’s Jenkins pipeline, and calculated carbon emissions for pipeline stages.
	•	Supported production deployments by ensuring resource stability, optimized configurations, and continuous monitoring solutions.


Description:
As a platform engineer, I want to analyze and implement a strategy for using a MonoRepo structure to package multiple components into a single container image. This analysis should focus on handling multiple JAR files generated by different Maven modules and consolidating them into a single location using a parent pom.xml file. This will ensure that all required JAR files are copied and included in the final image build process.

Acceptance Criteria:
Given a MonoRepo with multiple Maven modules,
When the parent pom.xml is configured to aggregate the artifacts (JARs) from all modules,
Then all JAR files should be copied into a single specified directory (e.g., /target/aggregated-jars) to be packaged into a container image.

 Research and Configure Parent POM for Aggregation

Analyze how to configure the parent pom.xml to handle multiple module builds and consolidate all JAR files in a single location.
Update the parent pom.xml with a Maven plugin (e.g., maven-dependency-plugin or maven-assembly-plugin) to copy all JAR files to a target directory.



# Stage 1: Use Python to fetch the source code
FROM python:3.10-slim AS builder

# Install required Python libraries
RUN pip install requests

# Set working directory
WORKDIR /workspace

# Copy the Python script
COPY clone_bitbucket_zip.py .

# Set environment variables for credentials
ARG BITBUCKET_USERNAME
ARG BITBUCKET_PASSWORD
ENV BITBUCKET_USERNAME=${BITBUCKET_USERNAME}
ENV BITBUCKET_PASSWORD=${BITBUCKET_PASSWORD}

# Run the Python script to clone repositories
RUN python clone_bitbucket_zip.py

# Stage 2: Build JARs using OpenJDK
FROM openjdk:11-jdk-slim AS app_builder

# Set working directory
WORKDIR /workspace

# Copy the source code from the first stage
COPY --from=builder /workspace/source_code /workspace/source_code

# Build repository_x and repository_y using Gradle
RUN cd /workspace/source_code/repo_x && ./gradlew build && \
    mkdir -p /deployment/x/jar && \
    cp build/libs/*.jar /deployment/x/jar/

RUN cd /workspace/source_code/repo_y && ./gradlew build && \
    mkdir -p /deployment/y/jar && \
    cp build/libs/*.jar /deployment/y/jar/

# Final stage: Produce minimal image with only the JARs
FROM openjdk:11-jdk-slim

WORKDIR /app

# Copy built JAR files
COPY --from=app_builder /deployment/x/jar /deployment/x/jar
COPY --from=app_builder /deployment/y/jar /deployment/y/jar

CMD ["java", "-version"]



...............

import os
import requests
import zipfile
import io
import sys

# Bitbucket configuration
BITBUCKET_USERNAME = os.getenv("BITBUCKET_USERNAME")  # Username from environment variable
BITBUCKET_PASSWORD = os.getenv("BITBUCKET_PASSWORD")  # Password from environment variable

REPOSITORIES = {
    "repo_x": "https://api.bitbucket.org/2.0/repositories/your_team/repository_x/src/master/",
    "repo_y": "https://api.bitbucket.org/2.0/repositories/your_team/repository_y/src/master/"
}

CLONE_DIR = "/workspace/source_code"  # Target directory to store source code


def download_and_extract(repo_name, repo_url, destination):
    print(f"Downloading repository '{repo_name}'...")

    # Add basic authentication
    response = requests.get(repo_url + "?format=zip", auth=(BITBUCKET_USERNAME, BITBUCKET_PASSWORD))

    if response.status_code == 200:
        print(f"Successfully downloaded '{repo_name}', extracting now...")
        try:
            # Extract the zip file
            with zipfile.ZipFile(io.BytesIO(response.content)) as z:
                z.extractall(destination)
            print(f"Repository '{repo_name}' extracted to '{destination}'")
        except zipfile.BadZipFile as e:
            print(f"Error extracting '{repo_name}': {e}")
            sys.exit(1)
    else:
        print(f"Error: Unable to download '{repo_name}'. Status code: {response.status_code}")
        sys.exit(1)


def main():
    if not BITBUCKET_USERNAME or not BITBUCKET_PASSWORD:
        print("Error: BITBUCKET_USERNAME and BITBUCKET_PASSWORD must be set in environment variables.")
        sys.exit(1)

    os.makedirs(CLONE_DIR, exist_ok=True)  # Create the workspace directory if it doesn't exist

    # Download and extract each repository
    for repo_name, repo_url in REPOSITORIES.items():
        destination = os.path.join(CLONE_DIR, repo_name)
        os.makedirs(destination, exist_ok=True)
        download_and_extract(repo_name, repo_url, destination)


if __name__ == "__main__":
    main()

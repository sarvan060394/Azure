Deliverables for Year-End Self Evaluation
	•	Delivered a POC for building single container images using Python multistage Docker to optimize image size and efficiency.
	•	Performed analysis and created multi-feature container images to support KUBES capabilities.
	•	Conducted KUBES performance testing, including stress and load testing for Kafka REST Proxy and KUBES Proxy services.
	•	Enabled Horizontal Pod Autoscaler (HPA) and Vertical Pod Autoscaler (VPA) for KUBES applications to optimize resource utilization.
	•	Enabled SSL for KUBES applications to enhance security and supported production deployment.
	•	Implemented KUBES container startup sequence, ensuring all auxiliary components are up before starting the application container.
	•	Fine-tuned compute resource configurations for Kafka Producer deployments and performed POD T-shirt sizing for optimized resource management.
	•	Developed a solution to persist Prometheus metrics for KUBE REST Proxy to ensure metric continuity.
	•	Implemented Resource Service Monitor to handle failures, monitor sidecar state for restarts, and improve service resilience.
	•	Delivered a Redis cluster setup and resolved cluster creation issues to improve deployment stability.
	•	Performed POC for generating heap dumps for Java applications with the support of the CTI team.
	•	Guided and supported the team for all platform-related troubleshooting and issue resolution.
	•	Contributed to the CML event for the Green Engineering contest, implemented CodeCarbon in the bank’s Jenkins pipeline, and calculated carbon emissions for pipeline stages.
	•	Supported production deployments by ensuring resource stability, optimized configurations, and continuous monitoring solutions.


Description:
As a platform engineer, I want to analyze and implement a strategy for using a MonoRepo structure to package multiple components into a single container image. This analysis should focus on handling multiple JAR files generated by different Maven modules and consolidating them into a single location using a parent pom.xml file. This will ensure that all required JAR files are copied and included in the final image build process.

Acceptance Criteria:
Given a MonoRepo with multiple Maven modules,
When the parent pom.xml is configured to aggregate the artifacts (JARs) from all modules,
Then all JAR files should be copied into a single specified directory (e.g., /target/aggregated-jars) to be packaged into a container image.

 Research and Configure Parent POM for Aggregation

Analyze how to configure the parent pom.xml to handle multiple module builds and consolidate all JAR files in a single location.
Update the parent pom.xml with a Maven plugin (e.g., maven-dependency-plugin or maven-assembly-plugin) to copy all JAR files to a target directory.

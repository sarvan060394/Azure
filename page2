Based on the uploaded images, you can structure your deck to explain the current process of creating a certificate in Venafi as follows:

Venafi Certificate Creation Process

1. Overview of Venafi
	•	Venafi is used for certificate management.
	•	Developers generate certificates for development environments.
	•	System engineers generate certificates for production environments.
	•	Certificates are signed by a Bank-approved Certificate Authority.

2. Steps to Create a Certificate in Venafi

Step 1: Log in to Venafi
	•	Access the Venafi portal using valid credentials.

Step 2: Find the Correct Policy Location
	•	Navigate to the policy directory where the certificate needs to be added.
	•	Example: TI - Middleware Engineering → Container-test (actual policy depends on the use case).

Step 3: Add a New Server Certificate
	•	Right-click and select “Server Certificate” to create a new certificate.

Step 4: Populate Certificate Details
	•	Certificate Name and Common Name should be identical.
	•	Click “Edit” on Management Type and select “Enrollment”.

Step 5: Configure CSR and Hash Algorithm
	•	Choose Service Generated CSR.
	•	Use SHA-256 as the hash algorithm.

Step 6: Configure Subject Alternate Name (SAN)
	•	Add the Common Name to the SAN field.
	•	If multiple alternate names are required, specify them here.

Step 7: Review and Verify Other Information
	•	Ensure that the certificate type (e.g., G3B) is selected correctly.

Step 8: Fill in Custom Fields
	•	Mandatory fields include:
	•	AIT Number
	•	Certificate Owner DG & NBKID
	•	Certificate Owner Email
	•	Set the Deployment Environment as Non-Production unless specified otherwise.

Step 9: Save and Deploy
	•	Save all the details and submit the request for approval.
	•	Monitor the approval status and download the certificate once issued.

Key Components of Certificate Manager
	•	Certificate Issuance: Automated process for generating certificates.
	•	Renewal Policy: Ensures timely renewal before expiration.
	•	Revocation & Expiry Handling: Manages certificate deactivation when no longer needed.

Certificate Lifecycle in Certificate Manager
	1.	Request Initiation: User requests a certificate in Venafi.
	2.	Approval Workflow: Approval by the designated approvers.
	3.	Certificate Issuance: Certificate is generated and signed.
	4.	Deployment: Certificate is deployed in the required environment.
	5.	Monitoring & Renewal: Expiry tracking and automatic renewal reminders.
	6.	Revocation (if needed): Certificate is revoked in case of a security risk.

Would you like any additional details or modifications?


You can include these additional steps in your deck under “Pre-requisites for Venafi Access”:

Pre-requisites for Venafi Access

Before a user can generate certificates in Venafi, they must complete the following steps:
	1.	Complete Required Trainings
	•	Users must undergo mandatory training to understand Venafi usage and security policies.
	•	Training completion is required before portal access is granted.
	2.	Raise an ARM Request for Policy Tree Access
	•	Users need to submit an Access Request Management (ARM) ticket.
	•	The request must specify the required policy tree to which access is needed.
	•	Approval is required before certificate creation can proceed.

This ensures only authorized personnel can manage certificates and follow security best practices.

Would you like to add any screenshots or diagrams to illustrate the process?



JIRA Story: Unified Repository for Kubernetes Application

Description:
Currently, our source code exists in both our repository and the client’s repository, where it is built and deployed within their namespace. This setup requires maintaining duplicate codebases and increases complexity.

To streamline the deployment process, we need to build a stable container image and push it to a common registry (Artifactory). The client-side repository will only contain deployment manifests to pull the image from the registry, eliminating the need to maintain source code in multiple places.

This approach will ensure consistency, reduce maintenance overhead, and simplify client-side deployments.

Acceptance Criteria:
	1.	Stable Image Creation:
	•	The application code should be built into a stable container image.
	•	The image should be tagged appropriately (e.g., versioned or latest).
	2.	Push Image to Artifactory:
	•	The container image should be successfully pushed to the common registry (Artifactory).
	•	The image should be accessible by client namespaces.
	3.	Update Client Repository:
	•	The client-side repository should contain only deployment manifests.
	•	The manifests should reference the image from Artifactory instead of building it locally.
	4.	Validation & Testing:
	•	Verify that the application deploys successfully in the client namespace using the new approach.
	•	Ensure the client-side pipeline pulls the correct image version from Artifactory.
	5.	Documentation & Communication:
	•	Update internal documentation to reflect the new image-based deployment approach.
	•	Inform client teams about the changes and provide necessary guidance.

Would you like to include any additional criteria or details specific to your environment?
.....

JIRA Comment to Close the Story:

The implementation for this story has been successfully completed. Below are the key updates made:
	1.	Stable Image Creation & Push to Shared Registry:
	•	We have built a stable container image for the application.
	•	The image has been successfully pushed to the shared registry (Artifactory).
	•	Proper tagging and versioning have been implemented to ensure consistency in deployments.
	2.	Client-Side Repository Updates:
	•	The client-side repository has been updated to contain only the necessary deployment manifests.
	•	The manifests are configured to pull the application image from the shared registry instead of building it locally.
	•	This ensures a streamlined and uniform deployment process across all client environments.
	3.	Jenkins Pipeline for Deployment:
	•	A Jenkinsfile has been added to the client-side repository to automate the deployment of the application in OpenShift.
	•	This allows for a standardized deployment process without requiring manual intervention.
	4.	Configuration Management:
	•	A properties file has been added to the client repository to allow for environment-specific configurations.
	•	This ensures that necessary application parameters can be dynamically set during deployment.
	5.	Validation & Testing:
	•	Verified that the application deploys successfully in the client namespace using the new setup.
	•	Tested the end-to-end deployment process through Jenkins to ensure the correct image is pulled and deployed.

With these changes, the story is now complete, and we can proceed with closing it. Let me know if any further updates or refinements are needed.
